expression 'Create Date' = ```
		//Create Date Dimension
		let
		    Source = (StartDate as date, EndDate as date)=>
		
		let
		    //Capture the date range from the parameters
		    StartDate = #date(Date.Year(StartDate), Date.Month(StartDate), 
		    Date.Day(StartDate)),
		    EndDate = #date(Date.Year(EndDate), Date.Month(EndDate), 
		    Date.Day(EndDate)),
		
		    //Get the number of dates that will be required for the table
		    GetDateCount = Duration.Days(EndDate - StartDate),
		
		    //Take the count of dates and turn it into a list of dates
		    GetDateList = List.Dates(StartDate, GetDateCount, 
		    #duration(1,0,0,0)),
		
		    //Convert the list into a table
		    DateListToTable = Table.FromList(GetDateList, 
		    Splitter.SplitByNothing(), {"Date"}, null, ExtraValues.Error),
		
		    //Create various date attributes from the date column
		    //Add Year Column
		    YearNumber = Table.AddColumn(DateListToTable, "Year", 
		    each Date.Year([Date])),
		
		    //Add Quarter Column
		    QuarterNumber = Table.AddColumn(YearNumber , "Quarter", 
		    each "Q" & Number.ToText(Date.QuarterOfYear([Date]))),
		
		    //Add Week Number Column
		    WeekNumber= Table.AddColumn(QuarterNumber , "Week Number", 
		    each Date.WeekOfYear([Date])),
		
		    //Add Month Number Column
		    MonthNumber = Table.AddColumn(WeekNumber, "Month Number", 
		    each Date.Month([Date])),
		
		    //Add Month Name Column
		    MonthName = Table.AddColumn(MonthNumber , "Month", 
		    each Date.ToText([Date],"MMMM")),
		
		    //Add Day of Week Column
		    DayOfWeek = Table.AddColumn(MonthName , "Day of Week", 
		    each Date.ToText([Date],"dddd"))
		
		in
		    DayOfWeek
		in
		    Source
		```
	lineageTag: 6b7e8a1a-07a0-4994-b687-89f0a2bbade3

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression 'Ticket Measures' =
		let
		    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("i44FAA==", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),
		    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Column1", type text}}),
		    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"Column1"})
		in
		    #"Removed Columns"
	lineageTag: 6d05c42e-844a-4ba4-b2d0-cbef3806b649

	annotation PBI_ResultType = Table

